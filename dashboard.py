import streamlit as st
import redis
import plotly.express as px
import pandas as pd
from datetime import datetime
import time
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="User Analytics Dashboard",
    page_icon="üìä",
    layout="wide"
)

# –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.sidebar.title("üîç Debug Info")
st.sidebar.write("App started at:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Upstash URL
def parse_upstash_url(redis_url):
    """–ü–∞—Ä—Å–∏–Ω–≥ Upstash URL —Ñ–æ—Ä–º–∞—Ç–∞ rediss://default:password@host:port"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç, –ø–æ—Ä—Ç –∏ –ø–∞—Ä–æ–ª—å –∏–∑ URL
        match = re.match(r'rediss://default:([^@]+)@([^:]+):(\d+)', redis_url)
        if match:
            password = match.group(1)
            host = match.group(2)
            port = int(match.group(3))
            return host, port, password
        else:
            st.sidebar.error("Invalid Upstash URL format")
            return None, None, None
    except Exception as e:
        st.sidebar.error(f"URL parsing error: {str(e)}")
        return None, None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
@st.cache_resource
def init_redis():
    try:
        st.sidebar.info("Initializing Redis connection...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ REDIS_URL
        if "REDIS_URL" not in st.secrets:
            st.sidebar.error("REDIS_URL not found in secrets!")
            return None
        
        redis_url = st.secrets["REDIS_URL"]
        st.sidebar.write("Using REDIS_URL from secrets")
        
        # –ü–∞—Ä—Å–∏–º URL
        host, port, password = parse_upstash_url(redis_url)
        
        if not all([host, port, password]):
            st.sidebar.error("Failed to parse Redis URL")
            return None
        
        st.sidebar.write(f"Host: {host}")
        st.sidebar.write(f"Port: {port}")
        st.sidebar.write("Password: ******" if password else "No password")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        st.sidebar.write("Connecting to Redis...")
        r = redis.Redis(
            host=host,
            port=port,
            password=password,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ URL
            ssl=True,
            ssl_cert_reqs=None,
            decode_responses=True,
            socket_timeout=10,
            socket_connect_timeout=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.sidebar.write("Testing connection...")
        result = r.ping()
        st.sidebar.success(f"‚úÖ Redis connected successfully! Ping: {result}")
        return r
        
    except Exception as e:
        st.sidebar.error(f"‚ùå Redis connection failed: {str(e)}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
redis_client = init_redis()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä User Analytics Dashboard")
st.caption(f"Last update: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if not redis_client:
    st.error("""
    ‚ùå Cannot connect to Redis. Please check:
    
    1. **REDIS_URL format**: Should be like `rediss://default:password@host:port`
    2. **Redis server status** in Upstash console
    3. **Internet connection**
    
    **Your REDIS_URL looks correct!**
    """)
    st.stop()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_all_user_keys():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        keys = []
        cursor = 0
        max_iterations = 5
        
        for i in range(max_iterations):
            cursor, partial_keys = redis_client.scan(cursor, match="user:*", count=50)
            keys.extend(partial_keys)
            if cursor == 0:
                break
                
        return keys
        
    except Exception as e:
        st.error(f"Error getting keys: {str(e)}")
        return []

def get_user_data(key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_type = redis_client.type(key)
        
        if user_type == 'hash':
            data = redis_client.hgetall(key)
            data['user_id'] = key
            return data
        else:
            return {'user_id': key}
            
    except Exception as e:
        return {'user_id': key, 'error': str(e)}

def process_users_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.info("üîÑ Loading user data...")
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    keys = get_all_user_keys()
    if not keys:
        st.warning("No user keys found!")
        return pd.DataFrame()
    
    users_data = []
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–ª—è —Ç–µ—Å—Ç–∞
    test_keys = keys[:50] if len(keys) > 50 else keys
    
    for i, key in enumerate(test_keys):
        progress = (i + 1) / len(test_keys)
        progress_bar.progress(progress)
        status_text.text(f"Processing user {i+1}/{len(test_keys)}")
        
        user_data = get_user_data(key)
        users_data.append(user_data)
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        time.sleep(0.01)
    
    progress_bar.empty()
    status_text.empty()
    
    if not users_data:
        st.warning("No user data found!")
        return pd.DataFrame()
    
    df = pd.DataFrame(users_data)
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = process_users_data()

if df.empty:
    st.info("No user data available. Showing demo data...")
    # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    demo_data = {
        'user_id': ['user:1', 'user:2', 'user:3'],
        'onboarding_stage': ['complete', 'agreement', 'complete'],
        'agreement_accepted': ['2024-01-01', '2024-01-02', '2024-01-03'],
        'subscription_expiry': ['2024-12-31', '2024-01-15', '2024-12-31']
    }
    df = pd.DataFrame(demo_data)

# –í–µ—Ä—Ö–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
col1, col2 = st.columns(2)

with col1:
    total_users = len(df)
    st.metric("üë• –ö–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤", total_users)

with col2:
    if 'onboarding_stage' in df.columns:
        complete_users = len(df[df['onboarding_stage'] == 'complete'])
        st.metric("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º", complete_users)
    else:
        st.metric("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º", "N/A")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.subheader("üìä Data Info")
st.sidebar.write(f"Total users: {len(df)}")
if not df.empty:
    st.sidebar.write(f"Columns: {list(df.columns)}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
st.subheader("üìã Sample Data")
st.dataframe(df.head(), use_container_width=True)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.subheader("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

if 'onboarding_stage' in df.columns:
    st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–¥–∏—è–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:**")
    stage_counts = df['onboarding_stage'].value_counts()
    for stage, count in stage_counts.items():
        st.write(f"- {stage}: {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
else:
    st.write("–°—Ç–∞–¥–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –¥–∞–Ω–Ω—ã—Ö")

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
    st.cache_data.clear()
    st.rerun()

st.sidebar.success("‚úÖ Dashboard loaded successfully!")
