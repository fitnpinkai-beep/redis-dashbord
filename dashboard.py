import streamlit as st
import redis
import plotly.express as px
import pandas as pd
from datetime import datetime
import time
import re

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–∫–∏—à",
    page_icon="üìä",
    layout="wide"
)

# –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.sidebar.title("üîç Debug Info")
st.sidebar.write("App started at:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ Upstash URL
def parse_upstash_url(redis_url):
    """–ü–∞—Ä—Å–∏–Ω–≥ Upstash URL —Ñ–æ—Ä–º–∞—Ç–∞ rediss://default:password@host:port"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ö–æ—Å—Ç, –ø–æ—Ä—Ç –∏ –ø–∞—Ä–æ–ª—å –∏–∑ URL
        match = re.match(r'rediss://default:([^@]+)@([^:]+):(\d+)', redis_url)
        if match:
            password = match.group(1)
            host = match.group(2)
            port = int(match.group(3))
            return host, port, password
        else:
            st.sidebar.error("Invalid Upstash URL format")
            return None, None, None
    except Exception as e:
        st.sidebar.error(f"URL parsing error: {str(e)}")
        return None, None, None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
@st.cache_resource
def init_redis():
    try:
        st.sidebar.info("Initializing Redis connection...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤ - –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ REDIS_URL
        if "REDIS_URL" not in st.secrets:
            st.sidebar.error("REDIS_URL not found in secrets!")
            return None
        
        redis_url = st.secrets["REDIS_URL"]
        st.sidebar.write("Using REDIS_URL from secrets")
        
        # –ü–∞—Ä—Å–∏–º URL
        host, port, password = parse_upstash_url(redis_url)
        
        if not all([host, port, password]):
            st.sidebar.error("Failed to parse Redis URL")
            return None
        
        st.sidebar.write(f"Host: {host}")
        st.sidebar.write(f"Port: {port}")
        st.sidebar.write("Password: ******" if password else "No password")
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis
        st.sidebar.write("Connecting to Redis...")
        r = redis.Redis(
            host=host,
            port=port,
            password=password,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ URL
            ssl=True,
            ssl_cert_reqs=None,
            decode_responses=True,
            socket_timeout=10,
            socket_connect_timeout=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.sidebar.write("Testing connection...")
        result = r.ping()
        st.sidebar.success(f"‚úÖ Redis connected successfully! Ping: {result}")
        return r
        
    except Exception as e:
        st.sidebar.error(f"‚ùå Redis connection failed: {str(e)}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
redis_client = init_redis()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∫–∞–∫–∏—à")
st.caption(f"Last update: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if not redis_client:
    st.error("""
    ‚ùå Cannot connect to Redis. Please check:
    
    1. **REDIS_URL format**: Should be like `rediss://default:password@host:port`
    2. **Redis server status** in Upstash console
    3. **Internet connection**
    
    **Your REDIS_URL looks correct!**
    """)
    st.stop()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_all_user_keys():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        keys = []
        cursor = 0
        max_iterations = 100
        
        for i in range(max_iterations):
            cursor, partial_keys = redis_client.scan(cursor, match="user:*", count=100)
            keys.extend(partial_keys)
            if cursor == 0:
                break
                
        return keys
        
    except Exception as e:
        st.error(f"Error getting keys: {str(e)}")
        return []

def get_user_data(key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_type = redis_client.type(key)
        
        if user_type == 'hash':
            data = redis_client.hgetall(key)
            data['user_id'] = key
            return data
        else:
            return {'user_id': key}
            
    except Exception as e:
        return {'user_id': key, 'error': str(e)}

def process_users_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.info("üîÑ Loading user data...")
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    keys = get_all_user_keys()
    if not keys:
        st.warning("No user keys found!")
        return pd.DataFrame()
    
    users_data = []
    
    for i, key in enumerate(keys):
        progress = (i + 1) / len(keys)
        progress_bar.progress(progress)
        status_text.text(f"Processing user {i+1}/{len(keys)}")
        
        user_data = get_user_data(key)
        users_data.append(user_data)
        
        if i % 100 == 0:
            time.sleep(0.1)
    
    progress_bar.empty()
    status_text.empty()
    
    if not users_data:
        st.warning("No user data found!")
        return pd.DataFrame()
    
    df = pd.DataFrame(users_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    date_columns = ['agreement_accepted', 'subscription_expiry', 'created_at']
    for col in date_columns:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ bot_was_blocked –≤ boolean
    if 'bot_was_blocked' in df.columns:
        df['bot_was_blocked'] = df['bot_was_blocked'].astype(str).str.lower().isin(['true', '1', 'yes'])
    
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = process_users_data()

if df.empty:
    st.info("No user data available. Showing demo data...")
    # –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    demo_data = {
        'user_id': ['user:1', 'user:2', 'user:3', 'user:4', 'user:5'],
        'onboarding_stage': ['complete', 'agreement', 'birth_date', 'complete', 'gender'],
        'agreement_accepted': ['2024-01-01', '2024-01-02', '2024-01-03', '2024-01-04', '2024-01-05'],
        'subscription_expiry': ['2024-12-31', '2024-01-15', '2024-12-31', '2023-12-31', '2024-12-31'],
        'bot_was_blocked': ['True', 'False', 'True', 'False', 'False']
    }
    df = pd.DataFrame(demo_data)
    df['agreement_accepted'] = pd.to_datetime(df['agreement_accepted'])
    df['subscription_expiry'] = pd.to_datetime(df['subscription_expiry'])
    df['bot_was_blocked'] = df['bot_was_blocked'].astype(bool)

# –í–µ—Ä—Ö–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
st.subheader("üìà –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")

col1, col2, col3 = st.columns(3)

with col1:
    total_users = len(df)
    st.metric("üë• –ö–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤", total_users)

with col2:
    if 'onboarding_stage' in df.columns:
        complete_users = len(df[df['onboarding_stage'] == 'complete'])
        st.metric("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º", complete_users)
    else:
        st.metric("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º", "N/A")

with col3:
    if 'bot_was_blocked' in df.columns:
        blocked_users = len(df[df['bot_was_blocked'] == True])
        st.metric("üö´ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–±–∞–Ω–∏–≤—à–∏–µ", blocked_users)
    else:
        st.metric("üö´ –ö–ª–∏–µ–Ω—Ç—ã –∑–∞–±–∞–Ω–∏–≤—à–∏–µ", "N/A")

# –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
st.subheader("üéõÔ∏è –§–∏–ª—å—Ç—Ä—ã")

col1, col2, col3 = st.columns(3)

with col1:
    time_unit = st.selectbox(
        "‚è∞ –ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏",
        ["–î–Ω–∏", "–ù–µ–¥–µ–ª–∏", "–ú–µ—Å—è—Ü—ã"],
        index=0
    )

with col2:
    # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∞–¥–∏–π
    stage_options = {
        'agreement': '–°–æ–≥–ª–∞—à–µ–Ω–∏–µ',
        'birth_date': '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', 
        'gender': '–ü–æ–ª',
        'goal': '–¶–µ–ª—å',
        'activity_level': '–£—Ä–æ–≤–µ–Ω—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏',
        'current_weight': '–¢–µ–∫—É—â–∏–π –≤–µ—Å',
        'target_weight': '–¶–µ–ª–µ–≤–æ–π –≤–µ—Å', 
        'height': '–†–æ—Å—Ç',
        'daily_calories': '–ö–∞–ª–æ—Ä–∞–∂',
        'complete': '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π –æ–Ω–±–æ—Ä–¥–∏–Ω–≥'
    }
    
    selected_stages = st.multiselect(
        "üéØ –°—Ç–∞–¥–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞",
        options=list(stage_options.keys()),
        format_func=lambda x: stage_options[x],
        default=['complete']
    )

with col3:
    activity_filter = st.selectbox(
        "üîã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
        ["–í—Å–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"]
    )

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_df = df.copy()

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–¥–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
if selected_stages:
    filtered_df = filtered_df[filtered_df['onboarding_stage'].isin(selected_stages)]

# –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (–¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
current_time = datetime.now()
if activity_filter == "–ê–∫—Ç–∏–≤–Ω—ã–µ":
    if 'subscription_expiry' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['subscription_expiry'] > current_time]
elif activity_filter == "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ":
    if 'subscription_expiry' in filtered_df.columns:
        filtered_df = filtered_df[filtered_df['subscription_expiry'] <= current_time]

# –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞—Ç–µ —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

if 'agreement_accepted' in filtered_df.columns and not filtered_df['agreement_accepted'].isna().all():
    time_df = filtered_df.copy()
    time_df = time_df.dropna(subset=['agreement_accepted'])
    
    if not time_df.empty:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if time_unit == "–î–Ω–∏":
            time_df['time_group'] = time_df['agreement_accepted'].dt.date
        elif time_unit == "–ù–µ–¥–µ–ª–∏":
            time_df['time_group'] = time_df['agreement_accepted'].dt.to_period('W').dt.start_time
        else:  # –ú–µ—Å—è—Ü—ã
            time_df['time_group'] = time_df['agreement_accepted'].dt.to_period('M').dt.start_time
        
        # –î–ª—è –≥—Ä–∞—Ñ–∏–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞ –º–æ–º–µ–Ω—Ç time_group
        timeline_data = []
        
        for time_group in sorted(time_df['time_group'].unique()):
            # –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –¥–æ –∏–ª–∏ –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å
            users_on_date = time_df[time_df['agreement_accepted'] <= pd.to_datetime(time_group)]
            
            # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
            active_count = 0
            inactive_count = 0
            
            for _, user in users_on_date.iterrows():
                if 'subscription_expiry' in user and pd.notna(user['subscription_expiry']):
                    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω, –µ—Å–ª–∏ subscription_expiry > —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –≥—Ä–∞—Ñ–∏–∫–∞
                    if user['subscription_expiry'] > pd.to_datetime(time_group):
                        active_count += 1
                    else:
                        inactive_count += 1
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –∏—Å—Ç–µ—á–µ–Ω–∏—è, —Å—á–∏—Ç–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
                    inactive_count += 1
            
            timeline_data.append({
                'time_group': time_group,
                '–ê–∫—Ç–∏–≤–Ω—ã–µ': active_count,
                '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ': inactive_count,
                '–í—Å–µ–≥–æ': active_count + inactive_count
            })
        
        timeline_df = pd.DataFrame(timeline_data)
        
        # –ì—Ä–∞—Ñ–∏–∫
        fig_timeline = px.line(
            timeline_df,
            x='time_group',
            y=['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ', '–í—Å–µ–≥–æ'],
            title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ {time_unit.lower()}",
            labels={'time_group': '–î–∞—Ç–∞', 'value': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'variable': '–°—Ç–∞—Ç—É—Å'}
        )
        st.plotly_chart(fig_timeline, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç–∞–º–∏ agreement_accepted")
else:
    st.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ agreement_accepted –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

# –í–æ—Ä–æ–Ω–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ - –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –ª–æ–≥–∏–∫–∞
st.subheader("üîÑ –í–æ—Ä–æ–Ω–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

# –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –¥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
onboarding_stages_ordered = [
    'agreement', 'birth_date', 'gender', 'goal', 'activity_level',
    'current_weight', 'target_weight', 'height', 'daily_calories', 'complete'
]

funnel_data = []
for stage in onboarding_stages_ordered:
    # –î–ª—è –∫–∞–∂–¥–æ–π —Å—Ç–∞–¥–∏–∏ —Å—á–∏—Ç–∞–µ–º –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ—à–ª–∏ –î–û —ç—Ç–æ–π —Å—Ç–∞–¥–∏–∏
    stage_index = onboarding_stages_ordered.index(stage)
    stages_to_count = onboarding_stages_ordered[:stage_index + 1]  # –í—Å–µ —Å—Ç–∞–¥–∏–∏ –¥–æ —Ç–µ–∫—É—â–µ–π –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
    
    if 'onboarding_stage' in df.columns:
        # –°—á–∏—Ç–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –Ω–∞ —ç—Ç–æ–π –ò–õ–ò –õ–Æ–ë–û–ô –ü–†–ï–î–´–î–£–©–ï–ô —Å—Ç–∞–¥–∏–∏
        count = len(df[df['onboarding_stage'].isin(stages_to_count)])
    else:
        count = 0
        
    funnel_data.append({
        '–°—Ç–∞–¥–∏—è': stage_options.get(stage, stage),
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': count,
        '–ü–æ—Ä—è–¥–æ–∫': onboarding_stages_ordered.index(stage)
    })

funnel_df = pd.DataFrame(funnel_data)
funnel_df = funnel_df.sort_values('–ü–æ—Ä—è–¥–æ–∫')

if not funnel_df.empty:
    fig_funnel = px.funnel(
        funnel_df,
        x='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ',
        y='–°—Ç–∞–¥–∏—è',
        title="–í–æ—Ä–æ–Ω–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ (–∫—É–º—É–ª—è—Ç–∏–≤–Ω–∞—è)",
        labels={'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', '–°—Ç–∞–¥–∏—è': '–°—Ç–∞–¥–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞'}
    )
    st.plotly_chart(fig_funnel, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏")

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

col1, col2 = st.columns(2)

with col1:
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º
    if 'onboarding_stage' in df.columns:
        st.write("**–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —Å—Ç–∞–¥–∏—è–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:**")
        stage_counts = df['onboarding_stage'].value_counts()
        stage_counts_df = stage_counts.reset_index()
        stage_counts_df.columns = ['–°—Ç–∞–¥–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        stage_counts_df['–°—Ç–∞–¥–∏—è'] = stage_counts_df['–°—Ç–∞–¥–∏—è'].map(stage_options).fillna(stage_counts_df['–°—Ç–∞–¥–∏—è'])
        st.dataframe(stage_counts_df, use_container_width=True)

with col2:
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–µ–∫—É—â–∞—è)
    st.write("**–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**")
    if 'subscription_expiry' in df.columns:
        active_users = len(df[df['subscription_expiry'] > datetime.now()])
        inactive_users = len(df) - active_users
    else:
        active_users = 0
        inactive_users = len(df)
    
    activity_stats = pd.DataFrame({
        '–°—Ç–∞—Ç—É—Å': ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ'],
        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [active_users, inactive_users]
    })
    st.dataframe(activity_stats, use_container_width=True)

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
    st.cache_data.clear()
    st.rerun()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.subheader("üìä Data Info")
st.sidebar.write(f"Total users: {len(df)}")
if not df.empty and 'onboarding_stage' in df.columns:
    st.sidebar.write(f"Stages: {df['onboarding_stage'].nunique()} unique")

st.sidebar.success("‚úÖ Dashboard loaded successfully!")

