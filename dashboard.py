import streamlit as st
import redis
import plotly.express as px
import plotly.graph_objects as go
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
from urllib.parse import urlparse
import time
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="User Analytics Dashboard",
    page_icon="üìä",
    layout="wide"
)

# –î–µ–±–∞–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
st.sidebar.title("üîç Debug Info")
st.sidebar.write("App started at:", datetime.now().strftime("%Y-%m-%d %H:%M:%S"))

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
st.sidebar.subheader("Environment")
st.sidebar.write("Python version:", st.sidebar.code(str(pd.__version__)))
try:
    import redis as redis_lib
    st.sidebar.write("Redis version:", st.sidebar.code(redis_lib.__version__))
except:
    st.sidebar.write("Redis: Not available")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
@st.cache_resource
def init_redis():
    try:
        st.sidebar.info("Initializing Redis connection...")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
        if "REDIS_URL" not in st.secrets or "REDIS_TOKEN" not in st.secrets:
            st.sidebar.error("Redis secrets not found!")
            return None
        
        redis_url = st.secrets["REDIS_URL"]
        redis_token = st.secrets["REDIS_TOKEN"]
        
        # –ü–∞—Ä—Å–∏–Ω–≥ URL
        parsed_url = urlparse(redis_url)
        host = parsed_url.hostname
        port = parsed_url.port or 6379
        
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        r = redis.Redis(
            host=host,
            port=port,
            password=redis_token,
            ssl=True,
            ssl_cert_reqs=None,
            decode_responses=True,
            socket_timeout=10,
            socket_connect_timeout=10
        )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        r.ping()
        st.sidebar.success("‚úÖ Redis connected successfully!")
        return r
        
    except Exception as e:
        st.sidebar.error(f"‚ùå Redis connection failed: {str(e)}")
        return None

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
redis_client = init_redis()

# –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
st.title("üìä User Analytics Dashboard")
st.caption(f"Last update: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")

if not redis_client:
    st.error("""
    ‚ùå Cannot connect to Redis. Please check:
    1. REDIS_URL and REDIS_TOKEN in secrets
    2. Internet connection
    3. Redis server status
    """)
    st.stop()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def get_all_user_keys():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    try:
        keys = []
        cursor = 0
        while True:
            cursor, partial_keys = redis_client.scan(cursor, match="user:*", count=100)
            keys.extend(partial_keys)
            if cursor == 0:
                break
        return keys
    except Exception as e:
        st.error(f"Error getting keys: {str(e)}")
        return []

def get_user_data(key):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_type = redis_client.type(key)
        
        if user_type == 'hash':
            return redis_client.hgetall(key)
        elif user_type == 'string':
            data = redis_client.get(key)
            try:
                return json.loads(data)
            except:
                return {'raw_data': data}
        else:
            return {}
    except Exception as e:
        st.warning(f"Error reading user {key}: {str(e)}")
        return {}

def process_users_data():
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    st.info("üîÑ Loading user data...")
    progress_bar = st.progress(0)
    status_text = st.empty()
    
    keys = get_all_user_keys()
    if not keys:
        st.warning("No user keys found!")
        return pd.DataFrame()
    
    users_data = []
    
    for i, key in enumerate(keys):
        progress = (i + 1) / len(keys)
        progress_bar.progress(progress)
        status_text.text(f"Processing user {i+1}/{len(keys)}")
        
        user_data = get_user_data(key)
        if user_data:
            user_data['user_id'] = key
            users_data.append(user_data)
    
    progress_bar.empty()
    status_text.empty()
    
    if not users_data:
        st.warning("No user data found!")
        return pd.DataFrame()
    
    df = pd.DataFrame(users_data)
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç
    date_columns = ['agreement_accepted', 'subscription_expiry', 'created_at']
    for col in date_columns:
        if col in df.columns:
            df[col] = pd.to_datetime(df[col], errors='coerce')
    
    return df

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
df = process_users_data()

if df.empty:
    st.stop()

# –í–µ—Ä—Ö–Ω–∏–µ –º–µ—Ç—Ä–∏–∫–∏
col1, col2 = st.columns(2)

with col1:
    total_users = len(df)
    st.metric("üë• –ö–æ–ª-–≤–æ —é–∑–µ—Ä–æ–≤", total_users)

with col2:
    complete_users = len(df[df['onboarding_stage'] == 'complete'])
    st.metric("‚úÖ –ö–ª–∏–µ–Ω—Ç—ã —Å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–æ–º", complete_users)

# –§–∏–ª—å—Ç—Ä—ã
st.subheader("üìä –§–∏–ª—å—Ç—Ä—ã –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–æ–≤")

col1, col2, col3 = st.columns(3)

with col1:
    time_unit = st.selectbox(
        "‚è∞ –ï–¥–∏–Ω–∏—Ü–∞ –≤—Ä–µ–º–µ–Ω–∏",
        ["–î–Ω–∏", "–ù–µ–¥–µ–ª–∏", "–ú–µ—Å—è—Ü—ã"],
        index=0
    )

with col2:
    onboarding_filter = st.multiselect(
        "üéØ –°—Ç–∞–¥–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞",
        options=['agreement', 'birth_date', 'gender', 'goal', 'activity_level', 
                'current_weight', 'target_weight', 'height', 'daily_calories', 'complete'],
        default=['complete']
    )

with col3:
    activity_filter = st.selectbox(
        "üîã –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–ª–∏–µ–Ω—Ç–∞",
        ["–í—Å–µ", "–ê–∫—Ç–∏–≤–Ω—ã–µ", "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"]
    )

# –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_df = df.copy()

# –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞–¥–∏–∏ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
if onboarding_filter:
    filtered_df = filtered_df[filtered_df['onboarding_stage'].isin(onboarding_filter)]

# –§–∏–ª—å—Ç—Ä –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
current_time = datetime.now()
if activity_filter == "–ê–∫—Ç–∏–≤–Ω—ã–µ":
    filtered_df = filtered_df[pd.to_datetime(filtered_df['subscription_expiry']) > current_time]
elif activity_filter == "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ":
    filtered_df = filtered_df[pd.to_datetime(filtered_df['subscription_expiry']) <= current_time]

# –õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –ø–æ –¥–∞—Ç–µ
st.subheader("üìà –î–∏–Ω–∞–º–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏")

if 'agreement_accepted' in filtered_df.columns and not filtered_df['agreement_accepted'].isna().all():
    time_df = filtered_df.copy()
    time_df = time_df.dropna(subset=['agreement_accepted'])
    
    if not time_df.empty:
        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        if time_unit == "–î–Ω–∏":
            time_df['time_group'] = time_df['agreement_accepted'].dt.date
        elif time_unit == "–ù–µ–¥–µ–ª–∏":
            time_df['time_group'] = time_df['agreement_accepted'].dt.to_period('W').dt.start_time
        else:  # –ú–µ—Å—è—Ü—ã
            time_df['time_group'] = time_df['agreement_accepted'].dt.to_period('M').dt.start_time
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        timeline_data = time_df.groupby('time_group').size().reset_index(name='user_count')
        timeline_data = timeline_data.sort_values('time_group')
        
        # –ì—Ä–∞—Ñ–∏–∫
        fig_timeline = px.line(
            timeline_data,
            x='time_group',
            y='user_count',
            title=f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ {time_unit.lower()}",
            labels={'time_group': '–î–∞—Ç–∞', 'user_count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'}
        )
        st.plotly_chart(fig_timeline, use_container_width=True)
    else:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –¥–∞—Ç–∞–º–∏ agreement_accepted")
else:
    st.warning("–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–æ–ª–æ–Ω–∫–∞ agreement_accepted –∏–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö")

# –í–æ—Ä–æ–Ω–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞
st.subheader("üîÑ –í–æ—Ä–æ–Ω–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞")

onboarding_stages = [
    'agreement', 'birth_date', 'gender', 'goal', 'activity_level',
    'current_weight', 'target_weight', 'height', 'daily_calories', 'complete'
]

funnel_data = []
for stage in onboarding_stages:
    count = len(df[df['onboarding_stage'] == stage])
    funnel_data.append({'stage': stage, 'count': count})

funnel_df = pd.DataFrame(funnel_data)

if not funnel_df.empty:
    fig_funnel = px.funnel(
        funnel_df,
        x='count',
        y='stage',
        title="–í–æ—Ä–æ–Ω–∫–∞ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º",
        labels={'count': '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'stage': '–°—Ç–∞–¥–∏—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞'}
    )
    st.plotly_chart(fig_funnel, use_container_width=True)
else:
    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≤–æ—Ä–æ–Ω–∫–∏")

# –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º
st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–¥–∏—è–º –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞:**")
stage_stats = df['onboarding_stage'].value_counts().reset_index()
stage_stats.columns = ['–°—Ç–∞–¥–∏—è', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
st.dataframe(stage_stats, use_container_width=True)

# –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
st.write("**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏:**")
active_users = len(df[pd.to_datetime(df['subscription_expiry']) > current_time])
inactive_users = len(df) - active_users

activity_stats = pd.DataFrame({
    '–°—Ç–∞—Ç—É—Å': ['–ê–∫—Ç–∏–≤–Ω—ã–µ', '–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ'],
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': [active_users, inactive_users]
})
st.dataframe(activity_stats, use_container_width=True)

# –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", type="primary"):
    st.cache_data.clear()
    st.rerun()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
st.sidebar.subheader("üìä Data Info")
st.sidebar.write(f"Total users: {len(df)}")
st.sidebar.write(f"Columns: {list(df.columns)}")
st.sidebar.write(f"Date range: {df['agreement_accepted'].min()} to {df['agreement_accepted'].max() if 'agreement_accepted' in df.columns else 'N/A'}")

# –û—Ç–ª–∞–¥–∫–∞ –ø–µ—Ä–≤—ã—Ö –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π
if st.sidebar.checkbox("Show sample data"):
    st.sidebar.write("Sample data:")
    st.sidebar.dataframe(df.head(3))

st.sidebar.success("‚úÖ Dashboard loaded successfully!")
